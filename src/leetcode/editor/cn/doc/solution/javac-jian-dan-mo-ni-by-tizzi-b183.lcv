## 解法一：模拟

逐一对比即可，最后返回points的中点坐标。
- 时间复杂度：$O(n)$
- 空间复杂度：$O(1)$

* []

```Java
class Solution {
    public int nearestValidPoint(int x, int y, int[][] points) {
        int ans = Integer.MAX_VALUE, idx = -1, n = points.length;
        for (int i = 0; i < n; i++) { 
            int[] p = points[i];
            if (p[0] != x && p[1] != y) continue;
            int t = Math.abs(x - p[0]) + Math.abs(y - p[1]);
            if (t < ans) {
                ans = t;
                idx = i;
            }
        }
        return idx;
    }
}
```

* []

```C++
class Solution {
public:
    int nearestValidPoint(int x, int y, vector<vector<int>>& points) {
         int ans = 0x3f3f3f3f, idx = -1, n = points.size();
        for (int i = 0; i < n; i++) { 
            int fx = points[i][0], fy = points[i][1];
            if (fx != x && fy != y) continue;
            int t = abs(x - fx) + abs(y - fy);
            if (t < ans) {
                ans = t;
                idx = i;
            }
        }
        return idx;
    }
};
```

--- 

如果有问题,欢迎评论区交流, 如果有帮助到你，请给题解点个赞和收藏哈~~~
